#!/bin/bash

# VM Toolkit Installation Script
# Installs VM toolkit from any directory and sets up configuration

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Parse command line arguments
INSTALL_DIR=""
DATA_DIR=""
FORCE=false

show_usage() {
    cat << EOF
VM Toolkit Installation Script

Usage: $0 [options]

Options:
  --install-dir DIR     Install toolkit to DIR (default: current directory)
  --data-dir DIR        Store VMs and data in DIR (default: <install-dir>/vm-toolkit-data)
  --force              Overwrite existing installation
  --help               Show this help

Examples:
  # Install from current directory with default data location (./vm-toolkit-data)
  ./install.sh

  # Install to specific location with custom data directory
  ./install.sh --install-dir /opt/vm-toolkit --data-dir /var/vm-data

  # Install from extracted archive
  tar -xzf vm-toolkit.tar.gz
  cd vm-toolkit
  ./install.sh
EOF
}

while [[ $# -gt 0 ]]; do
    case $1 in
        --install-dir)
            INSTALL_DIR="$2"
            shift 2
            ;;
        --data-dir)
            DATA_DIR="$2"
            shift 2
            ;;
        --force)
            FORCE=true
            shift
            ;;
        --help)
            show_usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Get script directory (where the toolkit is located)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Set defaults
if [ -z "$INSTALL_DIR" ]; then
    INSTALL_DIR="$SCRIPT_DIR"
fi

if [ -z "$DATA_DIR" ]; then
    DATA_DIR="$INSTALL_DIR/vm-toolkit-data"
fi

# Convert to absolute paths
INSTALL_DIR="$(cd "$INSTALL_DIR" 2>/dev/null && pwd)" || {
    error "Install directory does not exist: $INSTALL_DIR"
    exit 1
}

# Ensure data directory exists
mkdir -p "$DATA_DIR"
DATA_DIR="$(cd "$DATA_DIR" && pwd)"

VM_SCRIPT="$INSTALL_DIR/vm"
BIN_DIR="$HOME/bin"
SYMLINK_PATH="$BIN_DIR/vm"
CONFIG_FILE="$HOME/.vm-toolkit-config"

log "Installing VM Toolkit..."
log "  Install directory: $INSTALL_DIR"
log "  Data directory: $DATA_DIR"
log "  Config file: $CONFIG_FILE"

# Check if vm script exists
if [ ! -f "$VM_SCRIPT" ]; then
    error "VM script not found: $VM_SCRIPT"
    error "Make sure you're running this from the vm-toolkit directory"
    exit 1
fi

# Check if toolkit directory exists
if [ ! -d "$INSTALL_DIR/vm-toolkit" ]; then
    error "vm-toolkit directory not found: $INSTALL_DIR/vm-toolkit"
    error "Make sure you're running this from the vm-toolkit directory"
    exit 1
fi

# Create bin directory if it doesn't exist
if [ ! -d "$BIN_DIR" ]; then
    log "Creating $BIN_DIR directory..."
    mkdir -p "$BIN_DIR"
fi

# Handle existing symlink
if [ -L "$SYMLINK_PATH" ]; then
    if [ "$FORCE" = true ]; then
        log "Removing existing symlink..."
        rm "$SYMLINK_PATH"
    else
        warn "Symlink already exists: $SYMLINK_PATH"
        echo "Use --force to overwrite, or remove it manually"
        exit 1
    fi
elif [ -f "$SYMLINK_PATH" ]; then
    error "File exists at $SYMLINK_PATH (not a symlink)"
    error "Please remove it manually or use --force"
    exit 1
fi

# Create symlink
log "Creating symlink: $SYMLINK_PATH -> $VM_SCRIPT"
ln -s "$VM_SCRIPT" "$SYMLINK_PATH"

# Create or update configuration file
if [ -f "$CONFIG_FILE" ] && [ "$FORCE" != true ]; then
    warn "Configuration file already exists: $CONFIG_FILE"
    echo "Use --force to overwrite, or edit it manually"
else
    log "Creating configuration file: $CONFIG_FILE"
    cat > "$CONFIG_FILE" << EOF
# VM Toolkit Configuration
# Generated by install script on $(date)

# Installation paths
VM_TOOLKIT_DIR="$INSTALL_DIR"
VM_PROJECT_DIR="$DATA_DIR"

# Data locations (relative to VM_PROJECT_DIR)
VM_BASE_DIR="\$VM_PROJECT_DIR/vms"
CLOUD_IMAGE_CACHE="\$VM_PROJECT_DIR/.cache"
REGISTRY_FILE="\$VM_PROJECT_DIR/.vm-registry.json"

# User settings (customize as needed)
VM_USERNAME="\${USER:-ubuntu}"
VM_SSH_KEY="\$HOME/.ssh/id_ed25519.pub"
VM_SHELL="/bin/bash"
VM_SUDO_GROUPS="sudo,kvm,libvirt,docker"

# VM resource defaults
VM_DISK_SIZE="40G"
VM_MEM_MB="4096"
VM_VCPUS="4"

# Network defaults
VM_BRIDGE_IF="en0"  # macOS Wi-Fi interface

# QEMU defaults
VM_MACHINE="accel=tcg"
VM_CPU="max"
VM_DISPLAY="none"
VM_VGA="none"
EOF
fi

# Create data directory structure
log "Setting up data directories..."
mkdir -p "$DATA_DIR/vms"
mkdir -p "$DATA_DIR/.cache"

# Check if $HOME/bin is in PATH and add it if needed
if [[ ":$PATH:" != *":$BIN_DIR:"* ]]; then
    warn "$BIN_DIR is not in your PATH"

    # Detect shell and add to appropriate profile
    SHELL_NAME=$(basename "$SHELL")
    case "$SHELL_NAME" in
        bash)
            PROFILE_FILE="$HOME/.bashrc"
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # macOS uses .bash_profile by default
                PROFILE_FILE="$HOME/.bash_profile"
            fi
            ;;
        zsh)
            PROFILE_FILE="$HOME/.zshrc"
            ;;
        fish)
            PROFILE_FILE="$HOME/.config/fish/config.fish"
            ;;
        *)
            PROFILE_FILE="$HOME/.profile"
            ;;
    esac

    # Add PATH export to profile if not already there
    PATH_EXPORT="export PATH=\"\$HOME/bin:\$PATH\""
    if [ -f "$PROFILE_FILE" ] && grep -q "HOME/bin" "$PROFILE_FILE"; then
        log "PATH already configured in $PROFILE_FILE"
    else
        echo ""
        echo "Adding $BIN_DIR to PATH in $PROFILE_FILE..."
        echo "" >> "$PROFILE_FILE"
        echo "# Added by vm-toolkit installer" >> "$PROFILE_FILE"
        echo "$PATH_EXPORT" >> "$PROFILE_FILE"
        log "✅ Added $BIN_DIR to PATH in $PROFILE_FILE"
        echo ""
        echo "Reload your shell or run:"
        echo "  source $PROFILE_FILE"
        echo "Or open a new terminal window."
    fi
else
    log "$BIN_DIR is already in your PATH"
fi

# Test the installation
if command -v vm >/dev/null 2>&1; then
    log "✅ Installation successful!"
    echo ""
    echo "The 'vm' command is now available globally via symlink:"
    echo "  $SYMLINK_PATH -> $VM_SCRIPT"
    echo ""
    echo "You can now use 'vm' from anywhere:"
    echo "  vm help"
    echo "  vm create --name test"
    echo "  vm list"
else
    warn "Installation complete, but 'vm' command not found in PATH"
    echo ""
    echo "Symlink created: $SYMLINK_PATH -> $VM_SCRIPT"
    echo "You can still use the full path:"
    echo "  $VM_SCRIPT help"
    echo ""
    echo "Or reload your shell to pick up the PATH changes."
fi

echo ""
log "Installation Summary:"
echo "  Toolkit installed in: $INSTALL_DIR"
echo "  VMs will be stored in: $DATA_DIR/vms"
echo "  Cache directory: $DATA_DIR/.cache"
echo "  Configuration file: $CONFIG_FILE"
echo "  Command symlink: $SYMLINK_PATH"
echo ""
log "Next steps:"
echo "1. Check prerequisites: brew install qemu"
echo "2. Generate SSH key: ssh-keygen -t ed25519"
echo "3. Create your first VM: vm create --name test"
echo "4. Customize config: edit $CONFIG_FILE"
